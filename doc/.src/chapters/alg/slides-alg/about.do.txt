!split
===== Professor Hans Petter Langtangen (1962-2016) =====

FIGURE: [SIM135194_Simula_Hans_Petter_004-1024x681.jpg, width=600 frac=0.5]

 * 2011-2015 Editor-In-Chief SIAM J of Scientific Computing
 * Author of 13 published books on scientific computing
 * Professor of Mechanics, University of Oslo 1998
 * Developed INF5620 (which became IN5270 and now MAT-MEK4270)
 * "Memorial page" : "http://hpl-memorial.simula.no"

!split
======= MAT-MEK4270 in a nutshell =======
label{42700:about}

 * Numerical methods for partial differential equations (PDEs)
 * How do we solve a PDE in practice and produce numbers?
 * How do we trust the answer?
 * Approach: *simplify, understand, generalize*
 * IN5670 -> IN5270 -> MAT-MEK4270 - Lots of old material

!bsummary After the course
You see a PDE and can't wait to program a method
and visualize a solution! Somebody asks if the solution is right
and you can give a convincing answer.
!esummary

!split
===== The new official six-point course description =====

After having completed MAT-MEK4270 you

 * can derive methods and implement them to solve frequently
   arising partial differential equations (PDEs) from physics and mechanics.
 * have a good understanding of finite difference, finite element and variational
   methods and how they are applied in linear and nonlinear PDE problems.
 * can identify numerical artifacts and perform mathematical analysis
   to understand and cure non-physical effects.
 * can apply sophisticated programming techniques in Python, combined
   with Cython, C, C++, and Fortran code, to create modern,
   flexible simulation programs.
 * can construct verification tests and automate them.
 * have experience with project hosting sites (GitHub),
   version control systems (Git), report writing (LaTeX),
   and Python scripting for performing reproducible computational science.

!split
===== More specific contents: finite difference methods =====

!bblock
   * Simple ODEs
   * Exponential decay $u_t = -a u(t)$ in time
   * the wave equation $u_{tt}=\nabla^2 u$ in 1D, 2D, 3D
   * write your own software from scratch
   * understand how the methods work and why they fail
!eblock

!split
===== More specific contents: Variational methods (Galerkin) =====

!bblock
   * stationary diffusion equations $u_{xx}=f$ in 1D
   * time-dependent diffusion and wave equations in 1D
   * PDEs in 2D and 3D by use of the FEniCS and Shenfun softwares
   * perform hand-calculations, write your own software (1D)
   * understand how the methods work and why they fail
!eblock

!split
===== Philosophy: simplify, understand, generalize =====

 * Start with simplified ODE/PDE problems
 * Learn to reason about the discretization
 * Learn to implement, verify, and experiment
 * Understand the method, program, and results
 * Generalize the problem, method, and program

This is the power of applied mathematics!

# #ifdef OLD_EXAM_INFO
!split
===== The exam =====

!bpop
 * Oral exam
 * 6 problems (topics) are announced two weeks before the exam
 * Work out a 20 min presentations (talks) for each problem
 * At the exam: throw a die to pick your problem to be presented
 * Aids: plots, computer programs
 * Why? Very effective way of learning
 * Sure? Excellent results over 15 years
 * When? Late december
!epop
# #endif

!split
===== Required software =====

 * Our software platform: Python (sometimes combined with Cython,
   Fortran, C, C++)
 * Important Python packages: `numpy`, `scipy`, `matplotlib`,
   `sympy`, `fenics`, `shenfun`, ...
 * Anaconda Python

!split
===== Assumed/ideal background =====

 * IN1900: Python programming, solution of ODEs
 * Some experience with finite difference methods
 * Some analytical and numerical knowledge of PDEs
 * Much experience with calculus and linear algebra
 * Much experience with programming of mathematical problems
 * Experience with mathematical modeling with PDEs
   (from physics, mechanics, geophysics, or ...)

!split
===== Start-up example for the course =====

What if you don't have this ideal background?

 * Students come to this course with very different backgrounds
 * First task: summarize assumed background knowledge by going through
   a simple example
 * Also in this example:
   * Some fundamental material on software implementation
     and software testing
   * Material on analyzing numerical methods to understand
     why they can fail
   * Applications to real-world problems

!split
===== Start-up example =====

!bnotice ODE problem
!bt
\[ u'=-au,\quad u(0)=I,\ t\in (0,T],\]
!et
where $a>0$ is a constant.
!enotice

Everything we do is motivated by what we need as building blocks for
solving Partial Differential Equations (PDEs)!

!split
===== What to learn in the start-up example; standard topics =====

 * How to think when constructing finite difference methods, with special focus
   on the Forward Euler, Backward Euler, and Crank-Nicolson (midpoint)
   schemes
 * How to formulate a computational algorithm and translate it into
   Python code
 * How to make curve plots of the solutions
 * How to compute numerical errors
 * How to compute convergence rates

!split
===== What to learn in the start-up example; programming topics =====

 * How to verify an implementation and automate verification
   through nose tests in Python
 * How to structure code in terms of functions, classes, and modules
 * How to work with Python concepts such as arrays, lists, dictionaries,
   lambda functions, functions in functions (closures), doctests,
   unit tests, command-line interfaces, graphical user interfaces
 * How to perform array computing and understand the difference from
   scalar computing
 * How to conduct and automate large-scale numerical experiments
 * How to generate scientific reports

!split
===== What to learn in the start-up example; mathematical analysis =====

 * How to uncover numerical artifacts in the computed solution
 * How to analyze the numerical schemes mathematically to understand
   why artifacts occur
 * How to derive mathematical expressions for various measures of
   the error in numerical methods, frequently by using the `sympy` software
   for symbolic computation
 * Introduce concepts such as finite difference operators,
   mesh (grid), mesh functions,
   stability, truncation error, consistency, and convergence

# #ifdef NOTHERE
!split
===== What to learn in the start-up example; generalizations =====

 * Generalize the example to $u'(t)=-a(t)u(t) + b(t)$
 * Present additional methods for the general nonlinear ODE $u'=f(u,t)$,
   which is either a scalar ODE or a system of ODEs
 * How to access professional packages for solving ODEs
 * How our model equations like $u'=-au$ arises in a wide range
   of phenomena in physics, biology, and finance

# #endif